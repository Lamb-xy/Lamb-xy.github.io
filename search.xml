<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/03/03/less-xue-xi-bi-ji/"/>
      <url>/2022/03/03/less-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Less学习"><a href="#Less学习" class="headerlink" title="Less学习"></a>Less学习</h1><h2 id="引入Less"><a href="#引入Less" class="headerlink" title="引入Less"></a>引入Less</h2><p>1.在官网下载或者使用CDN</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;script src="//cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js">&lt;/script><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在命令行使用npm安装</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install -g less<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体只用命令</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">lessc styles.less > styles.css<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><h3 id="变量转换"><a href="#变量转换" class="headerlink" title="变量转换"></a>变量转换</h3><h4 id="值变量"><a href="#值变量" class="headerlink" title="值变量"></a>值变量</h4><p>以@开头定义变量，把常用变量封装到一个文件中可以立于代码组织维护</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */@color: #999;@bgColor: skyblue;//不要添加引号@width: 50%;#wrap &#123;  color: @color;  width: @width;&#125;    /* 生成后的 CSS */#wrap &#123;  color: #999;  width: 50%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择器变量"><a href="#选择器变量" class="headerlink" title="选择器变量"></a>选择器变量</h4><p>让选择器变动态</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */@mySelector: #wrap;@Wrap: wrap;@&#123;mySelector&#125;&#123; //变量名 必须使用大括号包裹  color: #999;  width: 50%;&#125;.@&#123;Wrap&#125;&#123;  color:#ccc;&#125;#@&#123;Wrap&#125;&#123;  color:#666;&#125;    /* 生成的 CSS */#wrap&#123;  color: #999;  width: 50%;&#125;.wrap&#123;  color:#ccc;&#125;#wrap&#123;  color:#666;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h4><p>减少代码书写量</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */@borderStyle: border-style;@Soild:solid;#wrap&#123;  @&#123;borderStyle&#125;: @Soild;//变量名 必须使用大括号包裹&#125;    /* 生成的 CSS */#wrap&#123;  border-style:solid;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="url变量"><a href="#url变量" class="headerlink" title="url变量"></a>url变量</h4><p>修改项目资源的变量就可以了</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */@images: "../img";//需要加引号body &#123;  background: url("@&#123;images&#125;/dog.png");//变量名 必须使用大括号包裹&#125;    /* 生成的 CSS */body &#123;  background: url("../img/dog.png");&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h4><blockquote><p>结构: @name: { 属性: 值 ;};<br>  使用：@name();</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">@background: &#123;background:red;&#125;;#main&#123;    @background();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h3><ul><li>加减法时 以第一个数据的单位为基准</li><li>乘除法时 注意单位一定要统一</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">@incompatible-units: 2 + 5px - 3cm; // 结果是 4px@base: 5%;@filler: @base * 2; // 结果是 10%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>就近原则，不提闭包(闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。)</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */@var: @a;@a: 100%;#wrap &#123;  width: @var;  @a: 9%;&#125;    /* 生成的 CSS */#wrap &#123;  width: 9%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量定义变量"><a href="#变量定义变量" class="headerlink" title="变量定义变量"></a>变量定义变量</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">@fnord:  "I am fnord.";@var:    "fnord";#wrap::after&#123;  content: @@var; //将@var替换为其值 content:@fnord;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><h4 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h4><p>&amp;代表上一层选择器的名字</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#header&#123;       &amp;:after&#123;         content:"Less is more!";       &#125;       .title&#123;         font-weight:bold;       &#125;       &amp;_content&#123;//理解方式：直接把 &amp; 替换成 #header         margin:20px;       &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>元素从分开写——&gt;可以写到一个文件</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */#main&#123;    //something...        @media screen&#123;        @media (max-width:768px)&#123;          width:100px;        &#125;    &#125;    @media tv &#123;      width:2000px;    &#125;&#125;/* 生成的 CSS */@media screen and (maxwidth:768px)&#123;  #main&#123;      width:100px;   &#125;&#125;@media tv&#123;  #main&#123;    width:2000px;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是每一个元素要编译出自己的@media声明</p></blockquote><h4 id="实战技巧"><a href="#实战技巧" class="headerlink" title="实战技巧"></a>实战技巧</h4><p>借助Less在元素中来定义自己的私有样式</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */#main&#123;  // something..  &amp;.show&#123;    display:block;  &#125;&#125;.show&#123;  display:none;//会被覆盖&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="混合方法-Mixins"><a href="#混合方法-Mixins" class="headerlink" title="混合方法(Mixins)"></a>混合方法(Mixins)</h3><h4 id="无参数方法"><a href="#无参数方法" class="headerlink" title="无参数方法"></a>无参数方法</h4><p>混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。使用时直接键入</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">.card &#123; // 等价于 .card()    background: #f6f6f6;    -webkit-box-shadow: 0 1px 2px rgba(151, 151, 151, .58);    box-shadow: 0 1px 2px rgba(151, 151, 151, .58);&#125;#wrap&#123;  .card;//等价于.card();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认参数方法"><a href="#默认参数方法" class="headerlink" title="默认参数方法"></a>默认参数方法</h4><p>@arguments指的是全部参数，传的参数一定要带单位<br>表示：@形参名: 数值</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">.border(@a:10px,@b:50px,@c:30px,@color:#000)&#123;          border:solid 1px @color;          box-shadow: @arguments;//指代的是 全部参数      &#125;      #main&#123;          .border(0px,5px,30px,red);//必须带着单位      &#125;      #wrap&#123;          .border(0px);      &#125;      #content&#123;        .border;//等价于 .border()      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法的匹配模式"><a href="#方法的匹配模式" class="headerlink" title="方法的匹配模式"></a>方法的匹配模式</h4><ul><li>与面向对象中的多态相似</li><li>传递的实参会找到多态方法中匹配度最高的(优先级高)</li><li>如果匹配的参数是变量，也会继续匹配</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */.triangle(top,@width:20px,@color:#000)&#123;    border-color:transparent  transparent @color transparent ;&#125;.triangle(right,@width:20px,@color:#000)&#123;    border-color:transparent @color transparent  transparent ;&#125;    .triangle(bottom,@width:20px,@color:#000)&#123;    border-color:@color transparent  transparent  transparent ;&#125;.triangle(left,@width:20px,@color:#000)&#123;    border-color:transparent  transparent  transparent @color;&#125;.triangle(@_,@width:20px,@color:#000)&#123;//@_是变量，可以被‘left’匹配    border-style: solid;    border-width: @width;&#125;#main&#123;    .triangle(left, 50px, #999)&#125;/* 生成的 CSS */#main&#123;  border-color:transparent  transparent  transparent #999;//先匹配重合度最高的  border-style: solid;//继续写入规则  border-width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法的命名空间"><a href="#方法的命名空间" class="headerlink" title="方法的命名空间"></a>方法的命名空间</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */#card()&#123;    background: #723232;    .d(@w:300px)&#123;        width: @w;                #a(@h:300px)&#123;            height: @h;//可以使用上一层传进来的方法            width: @w;        &#125;    &#125;&#125;#wrap&#123;    #card > .d > #a(100px);     //当使用'>'时,父元素不能加()&#125;#main&#123;    #card .d();&#125;#con&#123;    //.d() 如果前面没有引入命名空间 #card ，将会报错    #card; // 这里可以加(),等价于 #card();    .d(20px); //必须先引入 #card&#125;/* 生成的 CSS */#wrap&#123;  height:100px;  width:300px;&#125;#main&#123;  width:300px;&#125;#con&#123;  width:20px;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法的条件筛选"><a href="#方法的条件筛选" class="headerlink" title="方法的条件筛选"></a>方法的条件筛选</h4><p>Less不用if else ,用when</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行,另外还有 'when+not'和'when+,'.border(@width,@color,@style) when (@width>100px) and(@color=#999)&#123;    border:@style @color @width;&#125;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>除了关键字true 以外的值都是false</p></blockquote><h4 id="数量不定的参数"><a href="#数量不定的参数" class="headerlink" title="数量不定的参数"></a>数量不定的参数</h4><p>参数量不确定可以使用符号’…’,类似于ES6的拓展运算符</p><h4 id="方法使用-important"><a href="#方法使用-important" class="headerlink" title="方法使用 ! important"></a>方法使用 ! important</h4><p>表示最高优先级</p><h4 id="循环方法"><a href="#循环方法" class="headerlink" title="循环方法"></a>循环方法</h4><p>1.属性拼接方法</p><ul><li>+_代表用空格拼接</li><li>+代表用逗号拼接</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">//逗号      /* Less */      .boxShadow() &#123;          box-shadow+: inset 0 0 10px #555;      &#125;      .main &#123;        .boxShadow();        box-shadow+: 0 0 20px black;      &#125;      /* 生成后的 CSS */      .main &#123;        box-shadow: inset 0 0 10px #555, 0 0 20px black;      &#125;//空格      /* Less */      .Animation() &#123;        transform+_: scale(2);      &#125;      .main &#123;        .Animation();        transform+_: rotate(15deg);      &#125;          /* 生成的 CSS */      .main &#123;        transform: scale(2) rotate(15deg);      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实战技巧-1"><a href="#实战技巧-1" class="headerlink" title="实战技巧"></a>实战技巧</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */.average(@x, @y) &#123;  @average: ((@x + @y) / 2);&#125;    div &#123;  .average(16px, 50px); // 调用 方法  padding: @average;    // 使用返回值&#125;    /* 生成的 CSS */div &#123;  padding: 33px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承(extend)"></a>继承(extend)</h3><h4 id="extend的使用"><a href="#extend的使用" class="headerlink" title="extend的使用"></a>extend的使用</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">.animation&#123;    transition: all .3s ease-out;    .hide&#123;      transform:scale(0);    &#125;&#125;#main&#123;    &amp;:extend(.animation);//格式：选择器:extend(被继承的方法)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="all全局搜索替换"><a href="#all全局搜索替换" class="headerlink" title="all全局搜索替换"></a>all全局搜索替换</h4><p>使用选择器匹配到的全部声明</p><h4 id="减少代码的重复性"><a href="#减少代码的重复性" class="headerlink" title="减少代码的重复性"></a>减少代码的重复性</h4><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>1.导入less文件可以省略后缀<br>2.@import位置可以随意放</p><h4 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h4><p>只引入，不编译</p><h4 id="once"><a href="#once" class="headerlink" title="once"></a>once</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">@import (once) "foo.less";//表示之后引入文件的重复代码都不会解析<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a>multiple</h4><p>使用@import (multiple)允许导入多个同名文件。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="判断类型函数"><a href="#判断类型函数" class="headerlink" title="判断类型函数"></a>判断类型函数</h4><ul><li>isnumber()</li><li>iscolor()</li><li>isurl</li></ul><h4 id="颜色操作"><a href="#颜色操作" class="headerlink" title="颜色操作"></a>颜色操作</h4><ul><li>saturate  增加颜色饱和度。</li><li>lighten  增加颜色亮度。</li><li>darken  降低颜色亮度。</li><li>fade  给颜色设定透明度。</li><li>mix  根据比例混合两种颜色。</li></ul><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul><li>ceil  向上取整。 </li><li>floor 向下取整。</li><li>percentage  将浮点数转换为百分比字符串。</li><li>round  四舍五入。</li><li>sqrt  计算一个数的平方根。</li><li>abs  计算数字的绝对值，原样保持单位。</li><li>pow  计算一个数的乘方。</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>/* */ CSS原生注释，会被编译在 CSS 文件中。<br>/   / Less提供的一种注释，不会被编译在 CSS 文件中。</p><h4 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">/* Less */#main&#123;  width:~'calc(300px-30px)';&#125;    /* 生成后的 CSS */#main&#123;  width:calc(300px-30px);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用JS"><a href="#使用JS" class="headerlink" title="使用JS"></a>使用JS</h4><p>Less由JS编写，因此代码中可以使用JS</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Babel转码器</title>
      <link href="/2021/12/30/babel-zhuan-ma-qi/"/>
      <url>/2021/12/30/babel-zhuan-ma-qi/</url>
      
        <content type="html"><![CDATA[<p>-</p><h1 id="Babel-转码器"><a href="#Babel-转码器" class="headerlink" title="Babel 转码器"></a>Babel 转码器</h1><hr><p>Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行。</p><blockquote><p>下面的原始代码用了箭头函数，Babel 将其转为普通函数，就能在不支持箭头函数的 JavaScript 环境执行了。</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">// 转码前input.map(item => item + 1);// 转码后input.map(function (item) &#123;  return item + 1;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的命令在项目目录中，安装 Babel。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install --save-dev @babel/core<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件.babelrc"></a>配置文件.babelrc</h2><p>Babel 的配置文件是.babelrc，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。<br>该文件用来设置转码规则和插件，基本格式如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;  "presets": [],  "plugins": []&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>presets 字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 最新转码规则$ npm install --save-dev @babel/preset-env# react 转码规则$ npm install --save-dev @babel/preset-react<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，将这些规则加入.babelrc。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&#123;  "presets": [    "@babel/env",    "@babel/preset-react"  ],  "plugins": []&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，以下所有 Babel 工具和模块的使用，都必须先写好.babelrc。</p><h2 id="命令行转码"><a href="#命令行转码" class="headerlink" title="命令行转码"></a>命令行转码</h2><p>Babel 提供命令行工具@babel/cli，用于命令行转码。<br>它的安装命令如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install --save-dev @babel/cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基本语法如下</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 转码结果输出到标准输出$ npx babel example.js# 转码结果写入一个文件# --out-file 或 -o 参数指定输出文件$ npx babel example.js --out-file compiled.js# 或者$ npx babel example.js -o compiled.js# 整个目录转码# --out-dir 或 -d 参数指定输出目录$ npx babel src --out-dir lib# 或者$ npx babel src -d lib# -s 参数生成source map文件$ npx babel src -d lib -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a>babel-node</h2><p>@babel/node 模块的 babel-node 命令，提供一个支持 ES6 的 REPL 环境。它支持 Node 的 REPL 环境的所有功能，而且可以直接运行 ES6 代码。<br>首先，安装这个模块。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install --save-dev @babel/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，执行 babel-node 就进入 REPL 环境。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ npx babel-node> (x => x * 2)(1)2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>babel-node 命令可以直接运行 ES6 脚本。将上面的代码放入脚本文件 es6.js，然后直接运行。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># es6.js 的代码# console.log((x => x * 2)(1));$ npx babel-node es6.js2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="babel-register-模块"><a href="#babel-register-模块" class="headerlink" title="@babel/register 模块"></a>@babel/register 模块</h2><p>@babel/register 模块改写 require 命令，为它加上一个钩子。此后，每当使用 require 加载.js、.jsx、.es 和.es6 后缀名的文件，就会先用 Babel 进行转码。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install --save-dev @babel/register<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用时，必须首先加载@babel/register。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">// index.jsrequire('@babel/register');require('./es6.js');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，就不需要手动对 index.js 转码了。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ node index.js2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，@babel/register 只会对 require 命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p></blockquote><h2 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h2><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如 Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转码。</p><p>举例来说，ES6 在 Array 对象上新增了 Array.from 方法。<br>Babel 就不会转码这个方法。如果想让这个方法运行，可以使用 core-js 和 regenerator-runtime(后者提供 generator 函数的转码)，为当前环境提供一个垫片。</p><p>安装命令如下。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install --save-dev core-js regenerator-runtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在脚本头部，加入如下两行代码。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">import 'core-js';import 'regenerator-runtime/runtime';// 或者require('core-js');require('regenerator-runtime/runtime);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Babel 默认不转码的 API 非常多，详细清单可以查看 babel-plugin-transform-runtime 模块的 definitions.js 文件。</p><h2 id="浏览器环境"><a href="#浏览器环境" class="headerlink" title="浏览器环境"></a>浏览器环境</h2><p>Babel 也可以用于浏览器环境，使用@babel/standalone 模块提供的浏览器版本，将其插入网页。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;script src="https://unpkg.com/@babel/standalone/babel.min.js">&lt;/script>&lt;script type="text/babel">// Your ES6 code&lt;/script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p><p>Babel 提供一个 REPL 在线编译器，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。</p>]]></content>
      
      
      <categories>
          
          <category> ES6学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6学习 </tag>
            
            <tag> Babel转码器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六级渡劫</title>
      <link href="/2021/12/11/liu-ji-du-jie/"/>
      <url>/2021/12/11/liu-ji-du-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>剩余六级考试还有一个星期,跟着六级听力讲解视频做了点笔记</p></blockquote><h2 class="bamboo-h" >一些学习笔记</h2><p>教学视频<br><a href="https://www.bilibili.com/video/BV1cr4y1c7nZ?from=search&seid=12699288220905274517&spm_id_from=333.337.0.0">【合集】【六级听力】三小时带你搞定六级听力！全网最简单粗暴能提分的六级教程！_哔哩哔哩_bilibili</a></p><hr><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><p>解题步骤：</p><blockquote><ul><li>划关键词并猜测发音，动词/名词</li><li>使用视听一致+同转的方法听音做题</li><li>较难题目可以利用错误选项特点，反向选出答案</li><li>注意换题信号以及语气的暗示作用</li></ul></blockquote><h3 id="长对话题型"><a href="#长对话题型" class="headerlink" title="长对话题型"></a>长对话题型</h3><p>技巧：</p><blockquote><ul><li>男女士转换，注意听谁的回答</li><li>逻辑以及语气词：well，but，I think，what…is…(注意is后面)，in fact，for example（不重要），yet</li><li>开头以及结尾</li></ul></blockquote><h3 id="听力篇章"><a href="#听力篇章" class="headerlink" title="听力篇章"></a>听力篇章</h3><p>技巧：</p><blockquote><ul><li>前三句重点</li><li>疑问句，换题</li><li>视听一致</li><li>不确定听题目</li></ul></blockquote><h3 id="讲座"><a href="#讲座" class="headerlink" title="讲座"></a>讲座</h3><p>技巧：</p><blockquote><ul><li>to me，what…is…</li><li>疑问句，换题</li><li>选积极性！！</li></ul></blockquote><h1 id="呜呜呜呜呜，根本听不懂，不学了！！！"><a href="#呜呜呜呜呜，根本听不懂，不学了！！！" class="headerlink" title="呜呜呜呜呜，根本听不懂，不学了！！！"></a>呜呜呜呜呜，根本听不懂，不学了！！！</h1><hr><p>阅读 12月13—14日<br>写作 12月15—16日<br>翻译 12月17日</p>]]></content>
      
      
      <categories>
          
          <category> 考证过级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语六级 </tag>
            
            <tag> 捐款 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2021/12/11/wo-de-di-yi-pian-bo-ke-wen-zhang/"/>
      <url>/2021/12/11/wo-de-di-yi-pian-bo-ke-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h" >博客网站搭建过程</h2><hr><h2 id="突发奇想"><a href="#突发奇想" class="headerlink" title="突发奇想"></a>突发奇想</h2><p>某天逛 B 战的时候看到了一个<a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web">博客搭建</a>的教学视频,时长 30 分钟不到？？？于是也想自己动手试一试。(在此之前只会一点前端的知识)</p><p>首先下载好 Nodejs 和 Git(不了解)</p><p>然后跟着视频在进行这些操作</p><p>node -v #查看 node 版本<br>npm -v #查看 npm 版本<br>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a> #安装淘宝的 cnpm 管理器<br>cnpm -v #查看 cnpm 版本<br>cnpm install -g hexo-cli #安装 hexo 框架<br>hexo -v #查看 hexo 版本<br>mkdir blog #创建 blog 目录<br>cd blog #进入 blog 目录<br>sudo hexo init #生成博客 初始化博客<br>hexo s #启动本地博客服务<br><a href="http://localhost:4000/">http://localhost:4000/</a> #本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章 #返回 blog 目录<br>hexo clean #清理<br>hexo g #生成<br>#Github 创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在 blog 目录下安装 git 部署插件 #配置_config.yml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">    # Deployment    ## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html    deploy:type: gitrepo: https:&#x2F;&#x2F;github.com&#x2F;Lamb-xy&#x2F;Lamb-xy.github.io.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hexo d #部署到 Github 仓库里<br><a href="https://lamb-xy.github.io/">https://Lamb-xy.github.io/</a> #访问这个地址可以查看博客</p><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载 yilia 主题到本地</p><h1 id="修改hexo根目录下的-config-yml-文件-theme-yilia"><a href="#修改hexo根目录下的-config-yml-文件-theme-yilia" class="headerlink" title="修改hexo根目录下的_config.yml 文件:theme: yilia"></a>修改hexo根目录下的_config.yml 文件:theme: yilia</h1><p>hexo c #清理一下<br>hexo g #生成<br>hexo d #部署到远程 Github 仓库<br><a href="https://lamb-xy.github.io/">https://Lamb-xy.github.io/</a> #查看博客</p><p>但是我没有用那个 yilia 主题,后面自己换成这个 Bamboo 主题啦,因为看起来更好看一点。<br>后面就是看主题配置文档自己配置博客了</p><hr><h2 id="遇到的困难"><a href="#遇到的困难" class="headerlink" title="遇到的困难"></a>遇到的困难</h2><p>看起来好像很简单的样子,但是我几乎每一步都有问题 TAT,查了很多网上的资料,总结下来就是：</p><ul><li><p>  完全不了解 Git 以及 Nodejs,然后花了 2 小时学习了一下 Git 的基本命令</p></li><li><p>  访问 Github 太慢</p></li><li><p>  Nodejs 版本太高,导致很多不必要的问题(现在忘了有哪些问题了),后面我用 v12.14.1</p></li><li><p>  修改主题配置文件时不小心就会出错,然而自己几乎看不懂运行原理</p></li></ul><hr><h2 id="一些想法总结"><a href="#一些想法总结" class="headerlink" title="一些想法总结"></a>一些想法总结</h2><p>总之现在就是连滚带爬把这个博客框架给弄好了(应该吧),前前后后用了 4 天左右。总之,遇到不懂的就去搜,看看别人怎么做的,方法总比困难多嘛,说不定看着看着就会了哈哈哈</p><blockquote><p>注: 以上是一个不会码字不会写代码的小白的第一篇博客,下一次见~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-theme-bamboo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
